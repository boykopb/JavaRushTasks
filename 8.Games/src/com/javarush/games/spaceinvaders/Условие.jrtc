taskKey="com.javarush.games.spaceinvaders.part15"\n\nИгра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.


Требования:
1.	В классе SpaceInvadersGame должно существовать приватное поле enemyBullets типа List&lt;Bullet&gt;.
2.	Поле enemyBullets должно быть проинициализировано в методе createGame() новым объектом типа ArrayList&lt;Bullet&gt; до вызова метода drawScene().
3.	В методе drawScene() после вызова метода drawField() у каждого объекта из списка enemyBullets должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
4.	В методе moveSpaceObjects() у каждого объекта из списка enemyBullets должен быть вызван метод метод move().
5.	В классе SpaceInvadersGame должен существовать приватный метод void removeDeadBullets().
6.	В методе removeDeadBullets() необходимо из списка enemyBullets удалить все &quot;неживые&quot; пули и те, которые вылетели за пределы экрана (координата y пули больше либо равна HEIGHT - 1).
7.	В классе SpaceInvadersGame должен существовать приватный метод void check().
8.	В методе check() необходимо вызвать метод removeDeadBullets().
9.	В методе onTurn(int) класса SpaceInvadersGame необходимо вызвать метод check() до вызова метода drawScene().
10.	В методе onTurn(int) необходимо один раз вызвать у объекта enemyFleet метод fire(Game) с параметром &quot;this&quot; до вызова метода drawScene().
11.	Если результат вызова метода fire(Game) у объекта enemyFleet вернул не null, необходимо в список enemyBullets добавить этот результат. Добавление выполняется до вызова метода drawScene().


Игра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



Игра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



Игра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



Игра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



Игра Space Invaders (15/34)

Все вражеские пули будем хранить в переменной enemyBullets класса SpaceInvadersGame. Добавим их отрисовку
и движение в соответствующие методы. Чтобы удалить потраченные пули, создадим и реализуем
метод removeDeadBullets() в классе SpaceInvadersGame. Для удаления можно либо использовать итератор, либо создать копию списка enemyBullets
и проходить по ней циклом. Если в результате проверки объект нужно удалить из списка, вызываем enemyBullets.remove(bullet).
К потраченным пулям относятся те, которые вылетели за пределы экрана, и те, которые попали в цель (isAlive == false).
Добавим вспомогательный метод check(). На данном этапе он будет вызывать метод removeDeadBullets(). Впоследствии в нем
будут происходить различные проверки на каждом шаге игры.
С такой же частотой мы будем вызывать метод fire() у флота, при котором один из вражеских кораблей может выстрелить.
Если выстрел произошел, метод вернет пулю, которую нужно добавить в список.



